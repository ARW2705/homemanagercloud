#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('homemanagercloud:server');
const http = require('http');
const https = require('https');
const socketioJwt = require('socketio-jwt');
const TOKEN_KEY = process.env.TOKEN_KEY;

// Get port from environment and store in Express.

const port = normalizePort(process.env.PORT || '3000');
const host = process.env.HOST || '0.0.0.0'; // TODO remove or for prod
app.set('host', host);
app.set('port', port);
app.set('httpsPort', port+443);
app.set('wssPort', port+810);

// Create HTTP server.

const server = http.createServer(app);
server.listen(app.get('port'), app.get('host'), () => {
  console.log(`http server listening on ${app.get('host')}:${app.get('port')}`);
});
server.on('error', onError);
server.on('listening', onListening);

// Set options for secure communication

const options = {
  key: process.env.PRIVATE_KEY,
  cert: process.env.CERTIFICATE
};

// Create HTTPS server

const httpsServer = https.createServer(options, app);
secureServer.listen(app.get('httpsPort'), app.get('host'), () => {
  console.log(`https server listening on ${app.get('host')}:${app.get('httpsPort')}`);
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);

// Create WSS server

const wssServer = https.createServer(options, app);
const io = require('socket.io')(wssServer);

// wss authentication

io.set('authorization', socketioJwt.authorize({
  secret: TOKEN_KEY,
  handshake: true
}));

// wss handlers

require('../routes/climateSocket')(io);
require('../routes/garageDoorSocket')(io);

wssServer.listen(app.get('wssPort'), app.get('host'), () => {
  console.log(`wss server listening on ${app.get('host')}:${app.get('wssPort')}`);
});

// Normalize a port into a number, string, or false.

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
